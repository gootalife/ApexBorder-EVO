version: '3.8'
services:
  https-portal:
    image: steveltn/https-portal:1
    container_name: https-portal
    ports:
      - '80:80'
      - '443:443'
    restart: always
    tty: true
    volumes:
      - certs:/var/lib/https-portal
      - nginx-log:/var/log/nginx
    environment:
      STAGE: 'local'
      # FORCE_RENEW: 'true'
      DOMAINS: '${CLIENT_DOMAIN} -> http://client:8888,
      ${API_SERVER_DOMAIN} -> http://apiserver:8000'
      CLINET_DOMAIN:
      API_SERVER_DOMAIN:
      CUSTOM_NGINX_SERVER_CONFIG_BLOCK: |
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "POST, GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, Authorization, Accept";
        add_header Access-Control-Allow-Credentials true;
  apiserver:
    build:
      context: .
      dockerfile: apiserver.Dockerfile
    image: gootalife/apex-border-apiserver
    container_name: apiserver
    restart: always
    tty: true
    ports:
      - '8000:8000'
    depends_on:
      - db
    working_dir: /app/apiserver
    environment:
      - NODE_ENV
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASSWORD
      - DB_DATABASE
      - SEASON
      - BORDER
      - TZ
    command: npm start
  client:
    build:
      context: .
      dockerfile: client.Dockerfile
    image: gootalife/apex-border-client
    container_name: client
    tty: true
    ports:
      - '8888:8888'
    restart: always
    depends_on:
      - db
    working_dir: /app/client
    command: npm run serve
  cron:
    build:
      context: .
      dockerfile: cron.Dockerfile
    image: gootalife/apex-border-cron
    container_name: cron
    restart: always
    tty: true
    depends_on:
      - db
    working_dir: /app/cron
    environment:
      - NODE_ENV
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASSWORD
      - DB_DATABASE
      - SEASON
      - BORDER
      - TZ
    command: npm start
  db:
    build:
      context: .
      dockerfile: db.Dockerfile
    image: gootalife/apex-border-db
    container_name: db
    restart: always
    tty: true
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - '5432:${DB_PORT}'
    volumes:
      - db-data:/var/lib/postgresql/data
      - db-log:/var/log

volumes:
  db-data:
  db-log:
  certs:
  nginx-log:
